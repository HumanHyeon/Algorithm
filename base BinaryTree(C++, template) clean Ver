#include <iostream>
#include <queue>
using namespace std;

template <typename B>
class BinaryTree;

template<typename A>
class Node {
    friend class BinaryTree<A>;
private:
    Node* left;
    Node* right;
    A data;
public:
    Node(A data = 0, Node* left = NULL, Node* right = NULL) : data(data), left(left), right(right) {}
};

template<typename B>
class BinaryTree {
public:
    using TNode = Node<B>;
    BinaryTree(B data = 0) : root(new TNode(data)) {};
    TNode* getRoot() { return root; };
    void printTree(TNode* root) {
        if (root == NULL)    return;
        cout << root->data << " ";
        printTree(root->left);
        printTree(root->right);
    }
    TNode* appendTree(TNode* root, B data) {
        if (root == NULL) {
            root = new TNode(data);
            root->left = root->right = NULL;
            root->data = data;
            return root;
        }
        else {
            if (root->data > data) root->left = appendTree(root->left, data);
            else root->right = appendTree(root->right, data);
        }
        return root;
    }
    TNode* findMinTree(TNode* root) {
        TNode* min = root;
        while (min->left != NULL)    min = min->left;
        return min;
    }
    TNode* searchTree(TNode* root, B data) {
        if (root == NULL)    return NULL;
        if (root->data == data)  return root;
        else if (root->data > data) return searchTree(root->left, data);
        else return searchTree(root->right, data);
    }
    TNode* deleteTree(TNode* root, B data) {
        if (root == NULL)    return NULL;

        TNode* tNode = NULL;
        if (root->data > data)   root->left = deleteTree(root->left, data);
        else if (root->data < data)  root->right = deleteTree(root->right, data);
        else if (root->data == data) {
            if (root->right != NULL && root->left != NULL) {
                tNode = findMinTree(root->right);
                root->data = tNode->data;
                root->right = deleteTree(root->right, tNode->data);
            }
            else {
                tNode = (root->left == NULL) ? root->right : root->left;
                free(root);
                return tNode;
            }
        }
        return root;
    }
    void printLevelTraversal(TNode* root) {
        queue<TNode*> circuit;   //큐 생성 및 초기화
        if (root)    circuit.push(root);    //큐에 루트 노드 삽입
        while (!circuit.empty()) {  //큐가 empty일 때까지 반복
            TNode* tmp = circuit.front(); //추출
            circuit.pop();                  //추출
            cout << tmp->data << " ";       //방문
            if (tmp->left) circuit.push(tmp->left);     //왼쪽 자식 있을 시 삽입
            if (tmp->right) circuit.push(tmp->right);   //오른쪽 자식 있을 시 삽입
        }
        putchar('\n');
    }
private:
    TNode* root;
};

int main() {
    auto* BST = new BinaryTree<int>(5);
    auto* root = BST->getRoot();

    int arr[] = { 9, 6, 3, 1, 2, 4, 8, 7 };

    for (int i = 0; i < sizeof(arr) / sizeof(arr[0]); i++)
        root = BST->appendTree(root, arr[i]);

    BST->printLevelTraversal(root);
    BST->printTree(root);
    putchar('\n');

    //Node<int>* min = BST->findMinTree(root);

    Node<int>* search = BST->searchTree(root, -1);
    if (search != NULL)  cout << "find" << endl;
    else cout << "can't find" << endl;

    root = BST->deleteTree(root, 1);
    BST->printTree(root);
    putchar('\n');

}
